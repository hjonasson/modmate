import { promises } from 'node:fs';
import { resolve, relative, extname } from 'node:path';
import { parse } from '@swc/core';
import { ensureDir } from 'fs-extra';
import { createFilter } from 'vite';
import { Visitor } from '@swc/core/Visitor.js';

class ImportVisitor extends Visitor {
  imports = [];
  init() {
    this.imports = [];
  }
  visitTsType(n) {
    return n;
  }
  visitImportDeclaration(n) {
    const result = super.visitImportDeclaration(n);
    this.imports.push(result.source.value);
    return result;
  }
  getImports() {
    return this.imports;
  }
}
class DynamicImportVisitor extends Visitor {
  collectViteDynamicImport = false;
  viteDynamicImports = [];
  init() {
    this.viteDynamicImports = [];
  }
  visitTsType(n) {
    return n;
  }
  visitArrowFunctionExpression(n) {
    let isHelper = false;
    const bd = n.body;
    if (bd.type === "CallExpression") {
      if (bd.callee.type === "Identifier") {
        if (bd.callee.value === "__variableDynamicImportRuntimeHelper") {
          isHelper = true;
          this.collectViteDynamicImport = true;
        }
      } else if (bd.callee.type === "Import" && this.collectViteDynamicImport) {
        const { expression } = bd.arguments[0];
        if (expression.type === "StringLiteral") {
          this.viteDynamicImports.push(expression.value);
        }
      }
    }
    const result = super.visitArrowFunctionExpression(n);
    if (isHelper) {
      this.collectViteDynamicImport = false;
    }
    return result;
  }
  getViteDynamicImports() {
    return this.viteDynamicImports;
  }
}

const REG_POSTFIX = /[?#].*$/s;
const REG_SAFE_FILE_NAME = /^[a-zA-Z0-9._-]+$/;
const REG_SAFE_PATH = /^(\.\/|\/)?([a-zA-Z0-9._-]+\/)+$/;
function cleanUrl(url) {
  return url.replace(REG_POSTFIX, "");
}
function isSafeFileName(name) {
  return name.match(REG_SAFE_FILE_NAME);
}
function withTrailingSlash(path) {
  if (path[path.length - 1] !== "/") {
    return `${path}/`;
  }
  return path;
}
function isSafePath(name) {
  return withTrailingSlash(name).match(REG_SAFE_PATH);
}
function isParentDir(parent, file) {
  return file.startsWith(withTrailingSlash(parent));
}

function log(...contents) {
  console.log("[vite-plugin-deadfile] ", ...contents);
}

function isLegalSource(fileName) {
  if (fileName === "." || fileName === "..") {
    return false;
  }
  if (fileName === "node_modules") {
    return false;
  }
  return true;
}
async function readSourceFiles(root, filter) {
  let result = [];
  const level1Sources = await promises.readdir(root);
  const readAll = level1Sources.filter(isLegalSource).map(async (fileName) => {
    const subFilePath = resolve(root, fileName);
    const fileStat = await promises.stat(subFilePath);
    if (fileStat.isDirectory()) {
      const subResult = await readSourceFiles(subFilePath, filter);
      result = [...result, ...subResult];
    } else if (fileStat.isFile()) {
      if (filter(subFilePath)) {
        result.push(subFilePath);
      }
    }
  });
  await Promise.all(readAll);
  return result;
}
class FileMarker {
  static touchedFiles = /* @__PURE__ */ new Set();
  static sourceFiles = /* @__PURE__ */ new Set();
  static deadFiles = /* @__PURE__ */ new Set();
  static viteDynamicImports = /* @__PURE__ */ new Set();
  static async init(root, filter) {
    this.touchedFiles = /* @__PURE__ */ new Set();
    this.sourceFiles = new Set(await readSourceFiles(root, filter));
    this.deadFiles = new Set(this.sourceFiles);
    this.viteDynamicImports = /* @__PURE__ */ new Set();
  }
  static touch(id) {
    if (id.indexOf("node_modules") === -1) {
      if (this.sourceFiles.has(id)) {
        this.touchedFiles.add(id);
        this.deadFiles.delete(id);
      }
    }
  }
}

const REG_VALID_EXTENSION = /\.\w+$/;
const REG_NODE_MODULES = /node_modules\//;
const REG_HIDDEN_FILES = /\/\.[^/]+$/;
const astSupportedFileExtensions = ["js", "jsx", "ts", "tsx"];
function getOutputPath(absRoot, outputDir) {
  if (!isSafePath(outputDir)) {
    log(`Unsafe outputDir: ${outputDir}`);
    return false;
  }
  const absOutputDir = outputDir.startsWith("/") ? outputDir : resolve(absRoot, outputDir);
  if (!isParentDir(absRoot, absOutputDir)) {
    log(`outputDir must be inside: ${absRoot}, but got: ${absOutputDir}`);
    return false;
  }
  return absOutputDir;
}
async function ensureOutputFilePath(absRoot, outputDir, output) {
  const dir = getOutputPath(absRoot, outputDir);
  if (!dir)
    return dir;
  if (!isSafeFileName(output)) {
    log(`Unsafe output file name: ${output}`);
    return false;
  }
  await ensureDir(dir);
  return resolve(dir, output);
}
function createFileFilter(root, include, rawExclude, includeHidden) {
  const exclude = rawExclude instanceof Array ? [...rawExclude] : [rawExclude].filter((o) => o !== null);
  exclude.push(REG_NODE_MODULES);
  if (!includeHidden) {
    exclude.push(REG_HIDDEN_FILES);
  }
  return createFilter(include, exclude, {
    resolve: root
  });
}
function isLegalTransformTarget(importer) {
  if (!importer.startsWith("/") || importer.includes("node_modules")) {
    return false;
  }
  const ext = extname(REG_VALID_EXTENSION.test(importer) ? importer : cleanUrl(importer)).slice(1);
  if (!astSupportedFileExtensions.includes(ext)) {
    return false;
  }
  return true;
}
function getPrePlugin({
  root = ".",
  include = [],
  exclude = [],
  includeHiddenFiles = false
}) {
  const absoluteRoot = resolve(root);
  let visitor;
  return {
    name: "dead-file-pre",
    enforce: "pre",
    apply: "build",
    async configResolved() {
      const fileFilter = createFileFilter(root, include, exclude, includeHiddenFiles);
      await FileMarker.init(absoluteRoot, fileFilter);
      visitor = new ImportVisitor();
    },
    load(id) {
      FileMarker.touch(id);
    },
    async transform(source, importer) {
      if (!isLegalTransformTarget(importer))
        return;
      let mod = void 0;
      try {
        mod = await parse(source, {
          syntax: "typescript",
          tsx: true,
          target: "es2022"
        });
      } catch (e) {
        log("parse error: ", importer, e);
      }
      if (mod) {
        visitor.init();
        visitor.visitProgram(mod);
        const rawImports = visitor.getImports();
        const resolvedImports = await Promise.all(
          rawImports.map((rawImport) => {
            const resolved = this.resolve(rawImport, importer);
            return resolved;
          })
        );
        const resolvedIds = resolvedImports.map((r) => r?.id);
        resolvedIds.forEach((id) => {
          if (id) {
            FileMarker.touch(id);
          }
        });
      }
    }
  };
}
function getPostPlugin({
  root = ".",
  outputDir = ".",
  throwWhenFound = false,
  isDynamicModuleLive,
  output
}) {
  let visitor;
  const absoluteRoot = resolve(root);
  return {
    name: "dead-file-post",
    enforce: "post",
    apply: "build",
    configResolved() {
      visitor = new DynamicImportVisitor();
    },
    async transform(source, importer) {
      if (!isLegalTransformTarget(importer))
        return;
      let mod = void 0;
      try {
        mod = await parse(source, {
          syntax: "ecmascript",
          dynamicImport: true,
          target: "es2022"
        });
      } catch (e) {
        log("parse error: ", importer, e);
      }
      if (mod) {
        visitor.init();
        visitor.visitProgram(mod);
        const rawImports = visitor.getViteDynamicImports();
        if (rawImports.length > 0) {
          const resolvedImports = await Promise.all(
            rawImports.map((rawImport) => {
              const resolved = this.resolve(rawImport, importer);
              return resolved;
            })
          );
          resolvedImports.forEach((resolvedId) => resolvedId && FileMarker.viteDynamicImports.add(resolvedId.id));
        }
      }
    },
    async buildEnd() {
      const dynImport = FileMarker.viteDynamicImports;
      if (dynImport.size > 0) {
        if (isDynamicModuleLive) {
          dynImport.forEach((file) => {
            const rel = relative(absoluteRoot, file);
            if (!isDynamicModuleLive(rel)) {
              FileMarker.deadFiles.add(file);
              FileMarker.touchedFiles.delete(file);
            }
          });
        }
      }
      let result = [
        "[vite-plugin-deadfile]:",
        `  All source files: ${FileMarker.sourceFiles.size}`,
        `  Used source files: ${FileMarker.touchedFiles.size}`,
        `  Unused source files: ${FileMarker.deadFiles.size}`,
        ...[...FileMarker.deadFiles].map((fullPath) => `    ./${relative(absoluteRoot, fullPath)}`)
      ];
      if (dynImport.size > 0 && !isDynamicModuleLive) {
        result = [
          ...result,
          `  You may need to config 'isDynamicModuleLive' to check if the following ${dynImport.size} dynamically glob-import file${dynImport.size > 1 ? "s are" : " is"} needed, more info https://github.com/stauren/vite-plugin-deadfile?tab=readme-ov-file#isdynamicmodulelive`,
          ...[...dynImport].map((fullPath) => `    .${fullPath.substring(absoluteRoot.length)}`)
        ];
      }
      if (output) {
        const outputFile = await ensureOutputFilePath(absoluteRoot, outputDir, output);
        if (outputFile) {
          await promises.writeFile(outputFile, result.join("\n"));
          log(`Unused source files write to: ${outputFile}`);
        }
      } else {
        result.map((line) => console.log(line));
      }
      if (throwWhenFound !== false) {
        if (throwWhenFound === true && FileMarker.deadFiles.size > 0 || typeof throwWhenFound === "number" && FileMarker.deadFiles.size >= throwWhenFound)
          this.error(
            `[vite-plugin-deadfile]: Found ${FileMarker.deadFiles.size} unused source file${FileMarker.deadFiles.size > 1 ? "s" : ""}.`
          );
      }
    }
  };
}
function vitePluginDeadFile({
  root = ".",
  include = [],
  exclude = [],
  includeHiddenFiles = false,
  outputDir = ".",
  throwWhenFound = false,
  isDynamicModuleLive,
  output
}) {
  return [
    getPrePlugin({
      root,
      include,
      exclude,
      includeHiddenFiles
    }),
    getPostPlugin({
      root,
      outputDir,
      throwWhenFound,
      output,
      isDynamicModuleLive
    })
  ];
}

export { vitePluginDeadFile as default };
